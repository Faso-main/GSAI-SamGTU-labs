from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from Handlers.Keyboards import create_keyboard, make_row_keyboard
from LLM.Train_Save_Bert import response
from datetime import datetime, timedelta
from Handlers.Bot_State import Bot_State
from aiogram.types import ReplyKeyboardRemove


last_message_time = None
router1 = Router()


spravka = [
    "–°–ø—Ä–∞–≤–∫–∞, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç",
    "–°–ø—Ä–∞–≤–∫–∞-–≤—ã–∑–æ–≤",
    "–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ–±—É—á–µ–Ω–∏–∏ (–ø–µ—Ä–∏–æ–¥–µ)",
    "–°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞–∑–º–µ—Ä–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏",
    "–°–ø—Ä–∞–≤–∫–∞ –≤ –≤–æ–µ–Ω–∫–æ–º–∞—Ç",
]

grants = [
    "—Ä–∞–∑–º–µ—Ä —Å—Ç–∏–ø–µ–Ω–¥–∏–∏",
    "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏",
]
dekanat=[
"—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –¥–µ–∫–∞–Ω–∞—Ç–∞",
"–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–µ–∫–∞–Ω–∞—Ç–∞",
"—Å–≤—è–∑—å —Å –¥–µ–∫–∞–Ω–∞—Ç–æ–º",
"—Ç–µ–ª–µ—Ñ–æ–Ω –¥–µ–∫–∞–Ω–∞—Ç–∞"
]


@router1.callback_query(F.data == "table")
async def cmd_question(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ—Ç–µ –ø–æ–∑–¥–Ω–µ–µ\n–ñ–¥–µ–º –∏ –≤–µ—Ä–∏–º –≤ –º–æ–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!üíª")
    await callback.answer()


@router1.callback_query(F.data == "wi-fi")
async def cmd_wifi(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–°–µ—Ç—å: samgtu_emp –ø–∞—Ä–æ–ª—å: ooChaThee4\n"
        "–°–µ—Ç—å: samgtu_student –ø–∞—Ä–æ–ª—å: cueX2CBH\n"
        "–°–µ—Ç—å: samgtu_guest –ø–∞—Ä–æ–ª—å:see8Zu6k")
    await callback.answer()


@router1.callback_query(F.data == "question")
async def cmd_question(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Bot_State.question)
    await callback.message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?")


@router1.callback_query(F.data == "exit")
async def cmd_exit(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Bot_State.exit)
    await callback.message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–∏—Å–∞—Ç—å!‚úå")


@router1.message(Bot_State.question)
async def handle_question(message: types.Message, state: FSMContext):
    user_message = message.text.lower()
    if len(user_message) > 100:
        await message.answer("–Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –º–µ–Ω–µ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await state.set_state(Bot_State.question)
    if "—Å–ø—Ä–∞–≤–∫–∞" in user_message:
        await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞:", reply_markup=make_row_keyboard(spravka))
        await state.set_state(Bot_State.direct_to_LLM)
    elif "—Å—Ç–∏–ø–µ–Ω–¥–∏—è" in user_message:
        await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                             reply_markup=make_row_keyboard(grants))
        await state.set_state(Bot_State.direct_to_LLM)
    elif "–¥–µ–∫–∞–Ω–∞—Ç" in user_message:
        await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∫–∞–Ω–∞—Ç–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                             reply_markup=make_row_keyboard(dekanat))
        await state.set_state(Bot_State.direct_to_LLM)

    else:
        await process_general_question(message, state)


@router1.message(Bot_State.direct_to_LLM)
async def process_general_question(message: types.Message, state: FSMContext):
    global last_message_time
    current_time = datetime.now()
    time_limit = timedelta(seconds=10)

    if last_message_time is None or current_time - last_message_time > time_limit:
        await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        answer = response.find_answer(message.text)
        await state.set_state(Bot_State.waiting_for_question)
        await message.answer(text=answer, reply_markup=ReplyKeyboardRemove())
        keyboard = create_keyboard()
        await message.answer("–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", reply_markup=keyboard)
        last_message_time = datetime.now()
    else:

        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {10} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@router1.message(Bot_State.direct_to_LLM, F.text.in_(spravka + grants + dekanat))
async def handle_spravka_grants_decanat(message: types.Message, state: FSMContext):
    answer = response.find_answer(message.text.lower())
    await state.set_state(Bot_State.waiting_for_question)
    await message.answer(answer)
    keyboard = create_keyboard()
    await message.answer("–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", reply_markup=keyboard)


def register_handlers(router: Router):
    router.include_router(router1)
