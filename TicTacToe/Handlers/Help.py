import random
import asyncio
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã
class GameState(StatesGroup):
    playing = State()
    waiting_for_move = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router_help = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
game_board = [" "] * 9
current_player = "X"  # X - –∏–≥—Ä–æ–∫, O - –±–æ—Ç
game_active = False
player_score = 0
bot_score = 0
draws = 0

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–æ—Å–∫–∏
EMPTY_CELL = "‚¨ú"
X_CELL = "‚ùå"
O_CELL = "‚≠ï"

# –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–≤–∞)
DIFFICULTY_LEVELS = {
    "easy": "–õ–µ–≥–∫–∏–π (—Å–ª—É—á–∞–π–Ω—ã–µ —Ö–æ–¥—ã)",
    "medium": "–°—Ä–µ–¥–Ω–∏–π (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)"
}
current_difficulty = "medium"

def draw_board():
    emoji_board = []
    for cell in game_board:
        if cell == "X":
            emoji_board.append(X_CELL)
        elif cell == "O":
            emoji_board.append(O_CELL)
        else:
            emoji_board.append(EMPTY_CELL)
    
    board = ""
    for i in range(0, 9, 3):
        board += f"{emoji_board[i]}{emoji_board[i+1]}{emoji_board[i+2]}\n"
    return board

def check_winner():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
    for i in range(0, 9, 3):
        if game_board[i] == game_board[i+1] == game_board[i+2] != " ":
            return game_board[i]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for i in range(3):
        if game_board[i] == game_board[i+3] == game_board[i+6] != " ":
            return game_board[i]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    if game_board[0] == game_board[4] == game_board[8] != " ":
        return game_board[0]
    if game_board[2] == game_board[4] == game_board[6] != " ":
        return game_board[2]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
    if " " not in game_board:
        return "D"
    
    return None

def bot_move():
    empty_cells = [i for i, cell in enumerate(game_board) if cell == " "]
    
    # –õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - —Å–ª—É—á–∞–π–Ω—ã–µ —Ö–æ–¥—ã
    if current_difficulty == "easy":
        return random.choice(empty_cells) if empty_cells else None
    
    # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å
    for cell in empty_cells:
        game_board[cell] = "O"
        if check_winner() == "O":
            game_board[cell] = " "
            return cell
        game_board[cell] = " "
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–≥—Ä–æ–∫, —á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    for cell in empty_cells:
        game_board[cell] = "X"
        if check_winner() == "X":
            game_board[cell] = " "
            return cell
        game_board[cell] = " "
    
    # 3. –°–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
    return random.choice(empty_cells) if empty_cells else None

async def animate_bot_move(message: Message, cell_index: int):
    temp_board = game_board.copy()
    for emoji in ["üîµ", "‚ö™", "üî¥"]:
        temp_board[cell_index] = emoji
        await message.edit_text(
            f"ü§ñ –ë–æ—Ç –¥—É–º–∞–µ—Ç ({DIFFICULTY_LEVELS[current_difficulty]})...\n\n{draw_animated_board(temp_board)}"
        )
        await asyncio.sleep(0.3)
    
    temp_board[cell_index] = "O"
    await message.edit_text(
        f"ü§ñ –ë–æ—Ç –ø–æ—Ö–æ–¥–∏–ª!\n\n{draw_animated_board(temp_board)}"
    )
    await asyncio.sleep(0.5)

def draw_animated_board(board):
    emoji_board = []
    for cell in board:
        if cell == "X":
            emoji_board.append(X_CELL)
        elif cell == "O":
            emoji_board.append(O_CELL)
        elif cell in ["üîµ", "‚ö™", "üî¥"]:
            emoji_board.append(cell)
        else:
            emoji_board.append(EMPTY_CELL)
    
    animated_board = ""
    for i in range(0, 9, 3):
        animated_board += f"{emoji_board[i]}{emoji_board[i+1]}{emoji_board[i+2]}\n"
    return animated_board

def create_game_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(1, 10):
        builder.button(text=str(i))
    builder.button(text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É")
    builder.adjust(3, 3, 3, 1)
    return builder.as_markup(resize_keyboard=True)

def create_difficulty_keyboard():
    builder = ReplyKeyboardBuilder()
    for level in DIFFICULTY_LEVELS.values():
        builder.button(text=level)
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

@router_help.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    global game_board, current_player, game_active, player_score, bot_score, draws, current_difficulty
    
    if message.text.lower() in ["play"]:
        await message.answer(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
            reply_markup=create_difficulty_keyboard()
        )
        await state.set_state(GameState.playing)
        return
    
    elif message.text in DIFFICULTY_LEVELS.values():
        for key, value in DIFFICULTY_LEVELS.items():
            if value == message.text:
                current_difficulty = key
                break
        
        game_board = [" "] * 9
        current_player = "X"
        game_active = True
        
        await message.answer(
            f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {DIFFICULTY_LEVELS[current_difficulty]}\n"
            f"–í—ã: {X_CELL} | –ë–æ—Ç: {O_CELL}\n"
            f"–°—á–µ—Ç: {player_score}-{bot_score} (–ù–∏—á—å–∏: {draws})\n\n" + 
            draw_board(),
            reply_markup=create_game_keyboard()
        )
        return
    
    elif game_active and message.text.isdigit() and 1 <= int(message.text) <= 9:
        await state.set_state(GameState.waiting_for_move)
        cell_index = int(message.text) - 1
        
        if game_board[cell_index] == " ":
            game_board[cell_index] = "X"
            
            msg = await message.answer(
                f"–í–∞—à —Ö–æ–¥...\n\n{draw_board()}",
                reply_markup=create_game_keyboard()
            )
            await asyncio.sleep(0.5)
            
            winner = check_winner()
            if winner == "X":
                player_score += 1
                await message.answer(
                    f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n–°—á–µ—Ç: {player_score}-{bot_score}\n\n{draw_board()}",
                    reply_markup=ReplyKeyboardRemove()
                )
                game_active = False
                await state.clear()
                return
            elif winner == "D":
                draws += 1
                await message.answer(
                    f"ü§ù –ù–∏—á—å—è!\n–°—á–µ—Ç: {player_score}-{bot_score}\n\n{draw_board()}",
                    reply_markup=ReplyKeyboardRemove()
                )
                game_active = False
                await state.clear()
                return
            
            bot_cell = bot_move()
            if bot_cell is not None:
                temp_msg = await message.answer(f"ü§ñ –ë–æ—Ç –¥—É–º–∞–µ—Ç...")
                await animate_bot_move(temp_msg, bot_cell)
                game_board[bot_cell] = "O"
                await temp_msg.delete()
                
                winner = check_winner()
                if winner == "O":
                    bot_score += 1
                    await message.answer(
                        f"üò¢ –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!\n–°—á–µ—Ç: {player_score}-{bot_score}\n\n{draw_board()}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    game_active = False
                    await state.clear()
                    return
                elif winner == "D":
                    draws += 1
                    await message.answer(
                        f"ü§ù –ù–∏—á—å—è!\n–°—á–µ—Ç: {player_score}-{bot_score}\n\n{draw_board()}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    game_active = False
                    await state.clear()
                    return
            
            await message.answer(
                f"–í–∞—à —Ö–æ–¥ (1-9):\n\n{draw_board()}",
                reply_markup=create_game_keyboard()
            )
            await state.set_state(GameState.playing)
        else:
            await message.answer("–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", reply_markup=create_game_keyboard())
            await state.set_state(GameState.playing)
    
    elif game_active and message.text == "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É":
        game_active = False
        await message.answer(
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—á–µ—Ç: {player_score}-{bot_score}",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
    
    else:
        await state.clear()
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ 'play' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã",
            reply_markup=ReplyKeyboardRemove()
        )