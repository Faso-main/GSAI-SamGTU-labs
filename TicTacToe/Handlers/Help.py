import random
import asyncio
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã
class GameState(StatesGroup):
    playing = State()
    waiting_for_move = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router_help = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
game_board = [" "] * 9
current_player = "X"  # X - –∏–≥—Ä–æ–∫, O - –±–æ—Ç
game_active = False

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–æ—Å–∫–∏
EMPTY_CELL = "‚¨ú"
X_CELL = "‚ùå"
O_CELL = "‚≠ï"
BOARD_LINE = "‚ûñ"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–æ—Å–∫–∏ —Å —ç–º–æ–¥–∑–∏
def draw_board():
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ —ç–º–æ–¥–∑–∏
    emoji_board = []
    for cell in game_board:
        if cell == "X":
            emoji_board.append(X_CELL)
        elif cell == "O":
            emoji_board.append(O_CELL)
        else:
            emoji_board.append(EMPTY_CELL)
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å–∫—É –∏–∑ —ç–º–æ–¥–∑–∏
    board = ""
    for i in range(0, 9, 3):
        board += f"{emoji_board[i]}{emoji_board[i+1]}{emoji_board[i+2]}\n"
    return board

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã
def check_winner():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
    for i in range(0, 9, 3):
        if game_board[i] == game_board[i+1] == game_board[i+2] != " ":
            return game_board[i]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for i in range(3):
        if game_board[i] == game_board[i+3] == game_board[i+6] != " ":
            return game_board[i]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    if game_board[0] == game_board[4] == game_board[8] != " ":
        return game_board[0]
    if game_board[2] == game_board[4] == game_board[6] != " ":
        return game_board[2]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
    if " " not in game_board:
        return "D"
    
    return None

# –§—É–Ω–∫—Ü–∏—è —Ö–æ–¥–∞ –±–æ—Ç–∞
def bot_move():
    empty_cells = [i for i, cell in enumerate(game_board) if cell == " "]
    if empty_cells: return random.choice(empty_cells)
    return None

# –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥–∞ –±–æ—Ç–∞
async def animate_bot_move(message: Message, cell_index: int):
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    temp_board = game_board.copy()
    for emoji in ["üîµ", "‚ö™", "üî¥"]:
        temp_board[cell_index] = emoji
        await message.edit_text(
            f"–ë–æ—Ç –¥—É–º–∞–µ—Ç...\n\n{draw_animated_board(temp_board)}",
            reply_markup=message.reply_markup
        )
        await asyncio.sleep(0.3)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    temp_board[cell_index] = "O"
    await message.edit_text(
        f"–ë–æ—Ç –ø–æ—Ö–æ–¥–∏–ª!\n\n{draw_animated_board(temp_board)}",
        reply_markup=message.reply_markup
    )
    await asyncio.sleep(0.5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏
def draw_animated_board(board):
    emoji_board = []
    for cell in board:
        if cell == "X":
            emoji_board.append(X_CELL)
        elif cell == "O":
            emoji_board.append(O_CELL)
        elif cell in ["üîµ", "‚ö™", "üî¥"]:
            emoji_board.append(cell)
        else:
            emoji_board.append(EMPTY_CELL)
    
    animated_board = ""
    for i in range(0, 9, 3):
        animated_board += f"{emoji_board[i]}{emoji_board[i+1]}{emoji_board[i+2]}\n"
    return animated_board

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router_help.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    global game_board, current_player, game_active
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–ª–µ—Ç–æ–∫
    builder = ReplyKeyboardBuilder()
    for i in range(1, 10):
        builder.button(text=str(i))
    builder.adjust(3, 3, 3)
    reply_markup = builder.as_markup(resize_keyboard=True)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
    if message.text.lower() in ["–∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏", "–∏–≥—Ä–∞—Ç—å", "x o", "xo", "—Ö –æ", "—Ö–æ"]:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        game_board = [" "] * 9
        current_player = "X"
        game_active = True
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º answer —Å reply_markup
        await message.answer(
            "üéÆ –ò–≥—Ä–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ {X_CELL}\n\n" + 
            draw_board(),
            reply_markup=reply_markup
        )
        await state.set_state(GameState.playing)
        return
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9
    elif game_active and message.text.isdigit() and 1 <= int(message.text) <= 9:
        await state.set_state(GameState.waiting_for_move)
        cell_index = int(message.text) - 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
        if game_board[cell_index] == " ":
            # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
            game_board[cell_index] = "X"
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º answer, –∞ –Ω–µ edit_text
            msg = await message.answer(
                f"–í–∞—à —Ö–æ–¥...\n\n{draw_board()}",
                reply_markup=reply_markup
            )
            await asyncio.sleep(0.5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
            winner = check_winner()
            if winner == "X":
                await message.answer(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n\n{draw_board()}",
                    reply_markup=ReplyKeyboardRemove()
                )
                game_active = False
                await state.clear()
                return
            elif winner == "D":
                await message.answer(
                    f"ü§ù –ù–∏—á—å—è!\n\n{draw_board()}",
                    reply_markup=ReplyKeyboardRemove()
                )
                game_active = False
                await state.clear()
                return
            
            # –•–æ–¥ –±–æ—Ç–∞
            bot_cell = bot_move()
            if bot_cell is not None:
                # –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                temp_msg = await message.answer("–ë–æ—Ç –¥—É–º–∞–µ—Ç...")
                await animate_bot_move(temp_msg, bot_cell)
                game_board[bot_cell] = "O"
                await temp_msg.delete()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –±–æ—Ç–∞
                winner = check_winner()
                if winner == "O":
                    await message.answer(
                        f"üò¢ –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!\n\n{draw_board()}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    game_active = False
                    await state.clear()
                    return
                elif winner == "D":
                    await message.answer(
                        f"ü§ù –ù–∏—á—å—è!\n\n{draw_board()}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    game_active = False
                    await state.clear()
                    return
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(
                f"–í–∞—à —Ö–æ–¥ (1-9):\n\n{draw_board()}",
                reply_markup=reply_markup
            )
            await state.set_state(GameState.playing)
        else:
            await message.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", reply_markup=reply_markup)
            await state.set_state(GameState.playing)
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–≤–µ—á–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    else:
        await state.clear()
        await message.answer(text='–û—Ç–≤–µ—Ç', reply_markup=ReplyKeyboardRemove())

async def animate_bot_move(message: Message, cell_index: int):
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    temp_board = game_board.copy()
    for emoji in ["üîµ", "‚ö™", "üî¥"]:
        temp_board[cell_index] = emoji
        await message.edit_text(
            f"–ë–æ—Ç –¥—É–º–∞–µ—Ç...\n\n{draw_animated_board(temp_board)}"
        )
        await asyncio.sleep(0.3)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    temp_board[cell_index] = "O"
    await message.edit_text(
        f"–ë–æ—Ç –ø–æ—Ö–æ–¥–∏–ª!\n\n{draw_animated_board(temp_board)}"
    )
    await asyncio.sleep(0.5)